
SmoothStart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000001ce  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800064  00800064  00000266  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000009b3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  000009e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000001c8  00000000  00000000  00000a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000f2  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001e6  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000048  00000000  00000000  00000eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000177  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000008f  00000000  00000000  0000106b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  000010fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ee ec       	ldi	r30, 0xCE	; 206
  24:	f1 e0       	ldi	r31, 0x01	; 1
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a4 36       	cpi	r26, 0x64	; 100
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a4 e6       	ldi	r26, 0x64	; 100
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a8 36       	cpi	r26, 0x68	; 104
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	66 d0       	rcall	.+204    	; 0x110 <main>
  44:	c2 c0       	rjmp	.+388    	; 0x1ca <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_3>:
char LightSpeed = 3;
char LightValue = 0;

unsigned int timeBtn = 0;

ISR(TIM0_OVF_vect) {
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
  54:	9f 93       	push	r25
	if ( (MotorStatus==1 && MotorValue<255) || (MotorStatus==2 && 0<MotorValue)) {
  56:	80 91 63 00 	lds	r24, 0x0063
  5a:	81 30       	cpi	r24, 0x01	; 1
  5c:	29 f4       	brne	.+10     	; 0x68 <__vector_3+0x20>
  5e:	80 91 67 00 	lds	r24, 0x0067
  62:	8f 3f       	cpi	r24, 0xFF	; 255
  64:	39 f4       	brne	.+14     	; 0x74 <__vector_3+0x2c>
  66:	26 c0       	rjmp	.+76     	; 0xb4 <__stack+0x15>
  68:	82 30       	cpi	r24, 0x02	; 2
  6a:	21 f5       	brne	.+72     	; 0xb4 <__stack+0x15>
  6c:	80 91 67 00 	lds	r24, 0x0067
  70:	88 23       	and	r24, r24
  72:	01 f1       	breq	.+64     	; 0xb4 <__stack+0x15>
		cli();
  74:	f8 94       	cli
		if (MotorStatus==1) {
  76:	80 91 63 00 	lds	r24, 0x0063
  7a:	81 30       	cpi	r24, 0x01	; 1
  7c:	41 f4       	brne	.+16     	; 0x8e <__vector_3+0x46>
			MotorValue = MotorValue + MotorSpeed;
  7e:	90 91 67 00 	lds	r25, 0x0067
  82:	80 91 62 00 	lds	r24, 0x0062
  86:	89 0f       	add	r24, r25
  88:	80 93 67 00 	sts	0x0067, r24
  8c:	07 c0       	rjmp	.+14     	; 0x9c <__vector_3+0x54>
			if (255<MotorValue) MotorValue = 255;
		} else {
			MotorValue = MotorValue - MotorSpeed;
  8e:	80 91 67 00 	lds	r24, 0x0067
  92:	90 91 62 00 	lds	r25, 0x0062
  96:	89 1b       	sub	r24, r25
  98:	80 93 67 00 	sts	0x0067, r24
			if (MotorValue<0) MotorValue = 0;
		}

		if (MotorValue==255) {
  9c:	80 91 67 00 	lds	r24, 0x0067
  a0:	8f 3f       	cpi	r24, 0xFF	; 255
  a2:	11 f4       	brne	.+4      	; 0xa8 <__stack+0x9>
			PORTB |= (1<<outLed);
  a4:	c2 9a       	sbi	0x18, 2	; 24
  a6:	01 c0       	rjmp	.+2      	; 0xaa <__stack+0xb>
		} else {
			PORTB &= ~(1<<outLed);
  a8:	c2 98       	cbi	0x18, 2	; 24
		}

		OCR0A = 255 - MotorValue;
  aa:	80 91 67 00 	lds	r24, 0x0067
  ae:	80 95       	com	r24
  b0:	86 bf       	out	0x36, r24	; 54
		sei();
  b2:	78 94       	sei
	}

	if ( (LightStatus==1 && LightValue<255) || (LightStatus==2 && 0<LightValue)) {
  b4:	80 91 61 00 	lds	r24, 0x0061
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	29 f4       	brne	.+10     	; 0xc6 <__stack+0x27>
  bc:	80 91 66 00 	lds	r24, 0x0066
  c0:	8f 3f       	cpi	r24, 0xFF	; 255
  c2:	39 f4       	brne	.+14     	; 0xd2 <__stack+0x33>
  c4:	1e c0       	rjmp	.+60     	; 0x102 <__stack+0x63>
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	e1 f4       	brne	.+56     	; 0x102 <__stack+0x63>
  ca:	80 91 66 00 	lds	r24, 0x0066
  ce:	88 23       	and	r24, r24
  d0:	c1 f0       	breq	.+48     	; 0x102 <__stack+0x63>
		cli();
  d2:	f8 94       	cli
		if (LightStatus==1) {
  d4:	80 91 61 00 	lds	r24, 0x0061
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	41 f4       	brne	.+16     	; 0xec <__stack+0x4d>
			LightValue = LightValue + LightSpeed;
  dc:	90 91 66 00 	lds	r25, 0x0066
  e0:	80 91 60 00 	lds	r24, 0x0060
  e4:	89 0f       	add	r24, r25
  e6:	80 93 66 00 	sts	0x0066, r24
  ea:	07 c0       	rjmp	.+14     	; 0xfa <__stack+0x5b>
			if (255<LightValue) LightValue = 255;
		} else {
			LightValue = LightValue - LightSpeed;
  ec:	80 91 66 00 	lds	r24, 0x0066
  f0:	90 91 60 00 	lds	r25, 0x0060
  f4:	89 1b       	sub	r24, r25
  f6:	80 93 66 00 	sts	0x0066, r24
			if (MotorValue<0) LightValue = 0;
		}

		OCR0B = LightValue;
  fa:	80 91 66 00 	lds	r24, 0x0066
  fe:	89 bd       	out	0x29, r24	; 41
		sei();
 100:	78 94       	sei
	}
}
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <main>:

int main(void) {
	// Init port B
	DDRB  = 0b00000111;	// 0 - вход, 1 - выход
 110:	87 e0       	ldi	r24, 0x07	; 7
 112:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000001;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	88 bb       	out	0x18, r24	; 24

	// Init PWM
	TCCR0A = 0b10100011;
 118:	83 ea       	ldi	r24, 0xA3	; 163
 11a:	8f bd       	out	0x2f, r24	; 47
	TCCR0B = 0b00000011;
 11c:	83 e0       	ldi	r24, 0x03	; 3
 11e:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
 120:	12 be       	out	0x32, r1	; 50

	OCR0A = 255 - MotorValue;
 122:	80 91 67 00 	lds	r24, 0x0067
 126:	80 95       	com	r24
 128:	86 bf       	out	0x36, r24	; 54
	OCR0B = LightValue;
 12a:	80 91 66 00 	lds	r24, 0x0066
 12e:	89 bd       	out	0x29, r24	; 41

	// Init Timer0
//	TCCR0B |= (1 << CS00);
	TIMSK0 |= (1 << TOIE0);
 130:	89 b7       	in	r24, 0x39	; 57
 132:	82 60       	ori	r24, 0x02	; 2
 134:	89 bf       	out	0x39, r24	; 57
	sei();
 136:	78 94       	sei
			// Среднее нажатие
			if (minMedium<timeBtn && timeBtn<maxMedium) {
				if (LightStatus==2) {
					LightStatus = 1;
				} else {
					LightStatus = 2;
 138:	42 e0       	ldi	r20, 0x02	; 2
			}

			// Среднее нажатие
			if (minMedium<timeBtn && timeBtn<maxMedium) {
				if (LightStatus==2) {
					LightStatus = 1;
 13a:	51 e0       	ldi	r21, 0x01	; 1
	sei();
	
	while(1) {
		// Проверяем нажатие кнопки
		// Если кнопка нажата
		if ((PINB&(1<<inButton))==0) {
 13c:	b3 99       	sbic	0x16, 3	; 22
 13e:	fe cf       	rjmp	.-4      	; 0x13c <main+0x2c>
			timeBtn = 0;
 140:	10 92 65 00 	sts	0x0065, r1
 144:	10 92 64 00 	sts	0x0064, r1

			// Ждем отжатия клавиши (Считаем длину удержания кнопки)
			while((PINB&(1<<inButton))==0) {
 148:	b3 99       	sbic	0x16, 3	; 22
 14a:	34 c0       	rjmp	.+104    	; 0x1b4 <main+0xa4>
				timeBtn++;
 14c:	80 91 64 00 	lds	r24, 0x0064
 150:	90 91 65 00 	lds	r25, 0x0065
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	90 93 65 00 	sts	0x0065, r25
 15a:	80 93 64 00 	sts	0x0064, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	81 ee       	ldi	r24, 0xE1	; 225
 160:	94 e0       	ldi	r25, 0x04	; 4
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0x52>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x58>
 168:	00 00       	nop
		// Если кнопка нажата
		if ((PINB&(1<<inButton))==0) {
			timeBtn = 0;

			// Ждем отжатия клавиши (Считаем длину удержания кнопки)
			while((PINB&(1<<inButton))==0) {
 16a:	b3 9b       	sbis	0x16, 3	; 22
 16c:	ef cf       	rjmp	.-34     	; 0x14c <main+0x3c>
				timeBtn++;
				_delay_ms(5);
			}
			
			// Короткое нажатие
			if (minShort<timeBtn && timeBtn<maxShort) {
 16e:	80 91 64 00 	lds	r24, 0x0064
 172:	90 91 65 00 	lds	r25, 0x0065
 176:	9c 01       	movw	r18, r24
 178:	26 50       	subi	r18, 0x06	; 6
 17a:	31 09       	sbc	r19, r1
 17c:	2e 35       	cpi	r18, 0x5E	; 94
 17e:	31 05       	cpc	r19, r1
 180:	48 f4       	brcc	.+18     	; 0x194 <main+0x84>
				if (MotorStatus==2) {
 182:	20 91 63 00 	lds	r18, 0x0063
 186:	22 30       	cpi	r18, 0x02	; 2
 188:	19 f4       	brne	.+6      	; 0x190 <main+0x80>
					MotorStatus = 1;
 18a:	50 93 63 00 	sts	0x0063, r21
 18e:	02 c0       	rjmp	.+4      	; 0x194 <main+0x84>
				} else {
					MotorStatus = 2;
 190:	40 93 63 00 	sts	0x0063, r20
				}
			}

			// Среднее нажатие
			if (minMedium<timeBtn && timeBtn<maxMedium) {
 194:	9c 01       	movw	r18, r24
 196:	27 59       	subi	r18, 0x97	; 151
 198:	31 09       	sbc	r19, r1
 19a:	25 39       	cpi	r18, 0x95	; 149
 19c:	31 05       	cpc	r19, r1
 19e:	60 f4       	brcc	.+24     	; 0x1b8 <main+0xa8>
				if (LightStatus==2) {
 1a0:	20 91 61 00 	lds	r18, 0x0061
 1a4:	22 30       	cpi	r18, 0x02	; 2
 1a6:	19 f4       	brne	.+6      	; 0x1ae <main+0x9e>
					LightStatus = 1;
 1a8:	50 93 61 00 	sts	0x0061, r21
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <main+0xa8>
				} else {
					LightStatus = 2;
 1ae:	40 93 61 00 	sts	0x0061, r20
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <main+0xa8>
				timeBtn++;
				_delay_ms(5);
			}
			
			// Короткое нажатие
			if (minShort<timeBtn && timeBtn<maxShort) {
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
					LightStatus = 2;
				}
			}

			// Длинное нажатие
			if (minLong<timeBtn) {
 1b8:	8f 35       	cpi	r24, 0x5F	; 95
 1ba:	91 40       	sbci	r25, 0x01	; 1
 1bc:	08 f4       	brcc	.+2      	; 0x1c0 <main+0xb0>
 1be:	be cf       	rjmp	.-132    	; 0x13c <main+0x2c>
				MotorStatus = 2;
 1c0:	40 93 63 00 	sts	0x0063, r20
				LightStatus = 2;
 1c4:	40 93 61 00 	sts	0x0061, r20
 1c8:	b9 cf       	rjmp	.-142    	; 0x13c <main+0x2c>

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
